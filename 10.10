 #define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<errno.h>
#include<string.h>
#include<assert.h>
//int main()
//{
//	FILE* pfWrite=fopen("test.txt", "w");
//	if (pfWrite==NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	fputc('b', pfWrite);
//	fputc('i', pfWrite);
//	fputc('t', pfWrite);
//	fclose(pfWrite);
//	pfWrite = NULL;
//	return 0;
//}
//void Printf1()
//{
//	printf("     **     \n");
//}
//void Printf2()
//{
//	printf("*************\n");
//}
//void Printf3()
//{
//	printf("    *  *    \n");
//}
//int main()
//{
//	Printf1();
//	Printf1();
//	Printf2();
//	Printf2();
//	Printf3();
//	Printf3();
//	return 0;
//}

//求一个句子里有多少个单词？

//int main()
//{
//	char arr[30] ="I am a boy";
//	//gets(arr);//I am a boy;
//	int i = 0;
//	assert(arr);
//	int count = 0;
//	while (arr[i] != '\0')
//	{
//		if ((arr[i] == ' ') && (arr[i + 1] != ' '))
//		{
//			count++;
//		}
//		i++;
//	}
//	printf("%d", count);
//	return 0;
//}

//int main(int argCount, char* argValue[])
//{
//	FILE* srcFile =(FILE*)NULL, *destFile = 0;
//	int ch = 0;
//	if (argCount != 3)
//	{
//		printf("Usage:%s src-file-name dest-file-name\n", argValue[0]);
//	}
//	else {
//		if ((srcFile = fopen(argValue[1], "r")) == 0)
//		{
//			printf("Can not open source file \"%s\"!", argValue[1]);
//		}
//		else{
//			if ((destFile = fopen(argValue[2], "w")) == 0)
//			{
//				printf("Can not open destination file\"%s\"!", argValue[2]);
//				fclose(srcFile);
//			}
//			else
//			{
//				while ((ch = fgetc(srcFile)) != EOF)fputc(ch, destFile);
//				printf("Successful to copy a file!\n");
//				fclose(srcFile);
//				fclose(destFile);
//				return 0;
//			}
//		}
//	}
//	return 1;
//}


//int main()
//{
//	/*printf("%d\n", bool(-1));
//	printf("%d\n", bool(3));
//	printf("%d", bool(0));*/
//
//	bool flag;
//	printf("%d\n", sizeof(bool));
//	return 0;
//}

//打印水仙花数
#include<math.h>
//int main()
//{
//	int src = 0;
//	for (src = 0; src < 1000; src++)
//	{
//		//举例src=153
//		//判断位数
//		int tmp1 = src;
//		int tmp2 = src;
//		int k = 1;
//		while (tmp1 > 10)
//		{
//			tmp1 = tmp1 / 10;
//			k++;
//		}
//		//printf("%d", k);//调试判断一下判断位数写对了吗？
//		//求出和
//		int sum = 0;
//		int i = 0;
//		while (tmp2)
//		{
//			i = tmp2 % 10;
//			tmp2 = tmp2 / 10;
//			sum = int(pow(double(i), k)) + sum;
//			//sum = i^k + sum;//不行
//		}
//		//printf("%d", sum);
//		//判断是不是水仙花数
//		if (src == sum)
//		{
//			printf("%d ", sum);
//		}
//	}
//	return 0;
//}

//#define MAX_COLS 20
//#define MAX_INPUT 1000
//
//int read_column_numbers(int columns[], int max)
//{
//	int num = 0;
//	int ch;
//	while (num < max&&scanf("%d", &columns[num]) == 1 && columns[num] >= 0)
//	{
//		num += 1;
//	}
//	/*if (num % 2 != 0)
//	{
//		puts("Last column number is not paired.");
//	}*/
//	while ((ch = getchar()) != EOF&&ch != '\n')
//	{
//		;
//	}
//	return num;
//}
//
//void rearrange(char* output, const char* input, int n_columns, const int columns[])
//{
//	int col=0;
//	int output_col=0;
//	int len=0;
//	len = strlen(input);
//	for (col = 0; col < n_columns;col += 2)
//	{
//		int nchars = columns[col + 1] - columns[col] + 1;
//		if (columns[col] >= len || output_col == MAX_INPUT - 1)
//		{
//			break;
//		}
//		if (output_col + nchars>MAX_INPUT - 1)
//		{
//			nchars = MAX_INPUT - output_col - 1;
//		}
//		strncpy(output + output_col, input + columns[col], nchars);
//		output_col += nchars;
//	}
//	output[output_col] = '\0';
//}
//int main()
//{
//	int n_columns = 0;
//	int columns[MAX_COLS];
//	char input[MAX_INPUT];
//	char output[MAX_INPUT];
//	n_columns = read_column_numbers(columns, MAX_COLS);
//	while (gets(input) != NULL)
//	{
//		printf("Original input:%s\n", input);
//		rearrange(output, input, n_columns, columns);
//		printf("Rearrange line:%s\n", output);
//	}
//	return 0;
//}

//int main()
//{
	//int arr[] = { 0, 1, 2, 3, 5, 6 };
	//int x = 0;
	//int i = 0;
	//for (i = 0; i <= 6; i++)
	//{
	//	x ^= i;
	//}
	//for (i = 0; i < 6; i++)
	//{
	//	x ^= arr[i];
	//}
	//printf("%d", x);
//	int x = 2^ 3;
//	printf("%d", x);
//	return 0;
//}
void Reverse(int* nums, int left, int right)
{
	while (left < right)
	{
		int tmp = 0;
		tmp = nums[left];
		nums[left] = nums[right];
		nums[right] = tmp;
		left--;
		right--;
	}
}
void Rotate(int* nums, int numsize, int k)
{
	assert(nums);
	k = k % numsize;
	Reverse(nums, 0, numsize - k - 1);
	Reverse(nums, numsize - k, numsize-1);
	Reverse(nums, 0, numsize - 1);
}


int main()
{
	int nums[] = { 1, 2, 3, 4, 5, 6, 7 };
	int numsize = sizeof(nums) / sizeof(int);
	int k = 3;
	Rotate(nums, numsize, k);
	for (int i = 0; i < numsize; i++)
	{
		printf("%d ", nums[i]);
	}
	return 0;
}
