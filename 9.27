 #define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<string.h>
#include<assert.h>
#include<stdlib.h>
//void my_qishuqianzhi(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	while (left < right)
//	{
//		while ((left<right)&&(arr[left] % 2 == 1))
//		{
//			left++;
//		}
//		while ((left<right) && (arr[right] % 2 == 0))
//		{
//			right--;
//		}
//		if (left < right)
//		{
//			int tmp = 0;
//			tmp = arr[left];
//			arr[left] = arr[right];
//			arr[right] = tmp;
//		}
//		
//	}
//}
//int main()
//{
//	int arr[] = { 2,4,6,8,10};
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	my_qishuqianzhi(arr, sz);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//void reverse(char arr[], int left,int right)
//{
//	while (left < right)
//	{
//		char tmp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tmp;
//		left++;
//		right--;
//	}
//}
//void my_zuoxuan(char arr[], int k,int n)
//{
//	//翻转左边
//	reverse(arr,0,k-1);
//		//翻转右边
//	reverse(arr,k,n-1);
//	//翻转全部
//	reverse(arr,0,n-1);
//}
//int main()
//{
//	char arr[] = "abcdef";
//	assert(arr);
//	int k = 2;
//	int n = strlen(arr);
//	my_zuoxuan(arr, k,n);
//	printf("%s", arr);
//	return 0;
//}

//int is_zuoxuan(char* arr1,const char* arr2,int num)
//{
//	strncat(arr1, arr1, num);
//	char* tmp = (arr1, arr2);
//	if (tmp == NULL)
//		return 0;
//	else
//		return 1;
//}
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "cdeb";
//	assert(arr1);
//	int num1 = strlen(arr1);
//	assert(arr2);
//	int num2 = strlen(arr2);
//	if (num1 != num2)
//	{
//		printf("否\n");
//		return 0;
//	}
//	int ret=is_zuoxuan(arr1, arr2,num1);
//	if (ret == 1)
//		printf("是\n");
//	else
//		printf("否\n");
//	return 0;
//}


//int cmp_int(const void* e1, const void* e2)
//{
//	return (int)(*(int*)e1 - *(int*)e2);
//}


//void test1()
//{
//	int arr[] = { 10, 8, 9, 7, 6, 5, 4, 3, 2, 1 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	qsort(arr, sz, sizeof(arr[0]), cmp_int);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//		printf("%d ", arr[i]);
//}

 //int cmp_float(const void* e1,const void* e2)
 //{
	// if ((*(float*)e1 - *(float*)e2)>0)
	// {
	//	 return 1;
	// }
	// else if ((*(float*)e1 - *(float*)e2) < 0)
	// {
	//	 return -1;
	// }
	// else
	//	 return 0;
 //}
 //void test2()
 //{
	// float arr2[] = { 2.0, 4.0, 1.5, 5.6, 8.0, 7.2 };
	// int sz = sizeof(arr2) / sizeof(arr2[0]);
	// qsort(arr2, sz, sizeof(arr2[0]), cmp_float);
	// int i = 0;
	// for (i = 0; i < sz; i++)
	//	 printf("%lf\n", arr2[i]);
 //}

 struct stu
{
	char name[20];
	int xuehao;
	char sex[10];
};
 /*int cmp_xuehao(const void* e1,const void* e2)
 {
	 return ((struct stu*)e1)->xuehao - ((struct stu*)e2)->xuehao;
 }
 
 void test3()
 {
	 struct stu s[3] = { { "zhangsan", 20, "male" }, 
	                     { "liugang", 30, "male" }, 
	                     { "liquan", 10, "female" } };
	 int sz = sizeof(s) / sizeof(s[0]);
	 qsort(s, sz, sizeof(s[0]), cmp_xuehao);
	 int i = 0;
	 for (i = 0; i < 3; i++)
	 {
		 printf("%d\n", s[i].xuehao);
	 }
 }*/

 int cmp_name(const void* e1, const void* e2)
 {
	 return strcmp(((struct stu*)e1)->name,((struct stu*)e2)->name);
 }

// void test4()
// {
//	 struct stu s[3] = { { "zhangsan", 20, "male" },
//	 { "liugang", 30, "male" },
//	 { "liquan", 10, "female" } };
//	 int sz = sizeof(s) / sizeof(s[0]);
//	 qsort(s, sz, sizeof(s[0]), cmp_name);
//	 int i = 0;
//	 for (i = 0; i < 3; i++)
//	 {
//		 printf("%s\n", s[i].name);
//	 }
//
// }
//
//
//int main()
//{
//	//test1();
//	//test2();
//	//test3();
//	test4();
//	return 0;
//}

// void swap(char* buff1, char* buff2,int width)
// {
//	 int i = 0;
//	 for (i = 0; i < width; i++)
//	 {
//		 char tmp = *buff1;
//		 *buff1 = *buff2;
//		 *buff2 = tmp;
//		 buff1++;
//		 buff2++;
//	 }
// }
// void bubble_sort(void* base, int sz, int width,int(*cmp)(void* e1,void* e2))
// {
//	 int i = 0;
//	 for (i = 0; i < sz - 1; i++)
//	 {
//		 int j = 0;
//		 for (j = 0; j < sz - 1 - i; j++)
//		 {
//			 if (cmp((char*)base+j*width,(char*)base+(j+1)*width)>0)
//			 {
//				 //交换
//				 swap((char*)base + j*width, (char*)base + (j + 1)*width, width);
//			 }
//		 }
//	 }
// }
// int cmp_int(const void* e1, const void* e2)
// {
//	 return (int)(*(int*)e1 - *(int*)e2);
// }
//
// void test4()
// {
//	 int arr[] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
//	 int sz = sizeof(arr) / sizeof(arr[0]);
//	 bubble_sort(arr, sz, sizeof(arr[0]),cmp_int);
//	 int i = 0;
//	 for (i = 0; i < sz; i++)
//	 	 printf("%d\n", arr[i]);
// }
//	 void test5()
//{
//		 struct stu s[3] = { { "zhangsan", 20, "male" },
//		 { "liugang", 30, "male" },
//		 { "liquan", 10, "female" } };
//		 int sz = sizeof(s) / sizeof(s[0]);
//		 bubble_sort(s,sz,sizeof(s[0]),cmp_name);
//		 	 int i = 0;
//		 	 for (i = 0; i < 3; i++)
//		 	 {
//		 		 printf("%s\n", s[i].name);
//		 	 }
//}
//
// int main()
// {
//	 test4();
//	 //test5();
//	 return 0;
// }
//


//size_t my_strlen(const char* arr)
//{
//    assert(arr);
//	int count = 0;
//	while (*arr != 0)
//	{
//		count++;
//		arr++;
//	}
//	return count;
//}
//
//int main()
//{
//	char arr[] = "abcf";
//	size_t ret = my_strlen(arr);
//	printf("%d\n", ret);
//	return 0;
//}

//char* my_strcmp(char* arr1, const char* arr2)
//{
//	assert(arr1&&arr2);
//	char* ret = arr1;
//	while (*arr1++ = *arr2++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "fga";
//	my_strcmp(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

//char* my_strcat(char* dest, const char* src)
//{
//	assert(dest);
//	assert(src != NULL);
//	char* ret = dest;
//	while (*dest != '\0')
//	{
//		dest++;
//	}
//
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[20] = "hello";
//	char arr2[] = "bit";
//	my_strcat(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

//int my_strcmp(const char* str1, const char* str2)
//{
//	assert(str1&&str2);
//	while (* str1 == * str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;
//		}
//		str1++;
//		str2++;
//		
//	}
//	if (*str1 > *str2)
//	{
//		return 1;
//	}
//	else
//	{
//		return -1;
//	}
//}
//int main()
//{
//	char arr1[] = "abcff";
//	char arr2[] = "abce";
//	int ret = my_strcmp(arr1, arr2);
//	printf("%d", ret);
//	return 0;
//}


//char* my_strncpy(char* dest, const char* src, size_t count)
//{
//	assert(dest&&src);
//	char* ret = dest;
//	while (count)
//	{
//		*dest++ = *src++;
//		count--;
//	}
//
//	return ret;
//}
//int main()
//{
//	char arr1[5] = "abc";
//	char arr2[] = "he";
//	strncpy(arr1, arr2, 3);
//	printf("%s\n", arr1);
//	return 0;
//}

//char* my_strstr(const char* p1,const char* p2)
//{
//	assert(p1&&p2);
//	char* s1 = NULL;
//	char* s2 = NULL;
//	char* cur = (char*)p1;
//	if (*p2 == '\0')
//	{
//		return p1;
//	}
//	while (*cur)
//	{
//		s1 = cur;
//		s2 = (char*)p2;
//		while ((*s1 == *s2)&&(*s1 != '\0')&&(*s2 != '\0'))
//		{
//			s1++;
//			s2++;
//		}
//		if (*s2 == '\0')
//		{
//			return cur;
//		}
//		cur++;
//	}
//	return NULL;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "def";
//	char* ret=my_strstr(arr1, arr2);
//	printf("%s\n", ret);
//	return 0;
//}

//int main()
//{
//	char arr[] = "123456@qq.com@xauat.edu.cn";
//	char buf[1024] = "0";
//	char tok[] = "@.";
//	strcpy(buf, arr);
//	char* ret = NULL;
//	for (ret=strtok(buf, tok); ret!= NULL;ret=strtok(NULL,tok))
//	{
//		printf("%s\n", ret);
//	}
//	return 0;
//}

#include<ctype.h>
//int main()
//{
//	/*char arr = "Aa";
//	int ret=isupper(arr);
//	printf("%d\n", ret);*/
//	/*char ch = toupper('q');
//	putchar(ch);*/
//	int i = 0;
//	char arr[] = "I Am A C++222 Engineer";
//	while (arr[i])
//	{
//		putchar(tolower(arr[i++]));
//	}
//		/*if (isupper(arr[i]))
//		{
//			arr[i] = tolower(arr[i]);
//		}
//		i++;
//	}
//	printf("%s\n", arr);*/
//	return 0;
//}

void* my_memcpy(void* dest, const void* src, size_t num)
{
	void* ret = dest;
	assert(dest&&src);
	while (num--)
	{
		*((char*)dest) = *((char*)src);
		++(char*)dest;
		++(char*)src;
	}
	return ret;
}

int main()
{
	int arr1[5] = { 1, 2, 3, 4, 5 };
	int arr2[5] = { 0 };
	my_memcpy(arr2, arr1, sizeof(arr1));
	int i = 0;
	for (i = 0; i < 5; i++)
		printf("%d ", arr2[i]);
	return 0;
}
